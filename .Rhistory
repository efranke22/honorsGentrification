strip.text = element_text(family = "mono"))+
labs(title = "Recorded theft counts by census tract in 2020", fill = "Count", x = "", y="")
tract_aggregated_sp %>%
filter(year %in% c(2020))
tract_aggregated_sp %>%
filter(year %in% c(2019)) %>%
mutate(theftD= case_when(Theft <=90 ~ "38-90",
Theft >90 & Theft  <=130 ~ "91-130",
Theft >130 & Theft <= 200 ~ "131-200",
TRUE ~ "201+")) %>%
mutate(theftD= fct_relevel(theftD, levels = c("38-90", "91-130", "131-200", "201+"))) %>%
ggplot()+
geom_sf(aes(fill = theftD))+
scale_fill_brewer(palette = "Blues")+
theme_classic()+
#annotate("point", x = -93.2277, y = 44.974, colour = "white", size = 1) +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5, family = "mono"),
strip.background = element_blank(),
legend.title = element_text(family = "mono"),
legend.text = element_text(family = "mono"),
strip.text = element_text(family = "mono"))+
labs(title = "Recorded theft counts by census tract in 2020", fill = "Count", x = "", y="")
tract_aggregated_sp %>%
filter(year %in% c(2019))
cleanedFinal <- cleaned %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
select(-street_address, -BLOCK) %>%
rename("BLOCK" = "address") %>%
select(INCIDENT, BLOCK, year, OffenseCat, longitude, latitude)
totalSP <- rbind(cleanedFinal, intersectionsClean)
intersections<- read_csv("Data/Crime/intersections_RamseyCo_geocoded2.csv") %>%
filter(Score > 0) %>%
select(USER_combined, X, Y)
intersections$USER_combined <- sapply(sapply(strsplit(intersections$USER_combined, split = ' '), function(x) x[1:length(x)-1]), paste, collapse = ' ')
intersectionsClean <- saintpaulcrime %>%
filter(str_detect(BLOCK, " AND ")|str_detect(BLOCK, " & ")) %>%
mutate(BLOCK = str_replace(BLOCK, " AND ", " & ")) %>%
left_join(intersections, by = c("BLOCK" = "USER_combined")) %>%
filter(!is.na(X)) %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
rename("latitude" = "Y",
"longitude" = "X") %>%
select(INCIDENT, BLOCK, year, OffenseCat, longitude, latitude)
totalSP <- rbind(cleanedFinal, intersectionsClean)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidygeocoder)
library(sf)
saintpaulcrime <- read_csv("Data/Crime/Crime_Incident_Report_2023.csv")
load('Data/tractData/cleaned/gent_clean.RData')
saintpaulcrime <- saintpaulcrime %>%
mutate(year = as.numeric(substr(DATE, 1, 4))) %>%
filter(year != 2014, year!=2023) %>%
mutate(OffenseCat = case_when(INCIDENT %in% c("Theft", "Burglary", "Vandalism", "Narcotics", "Criminal Damage", "Graffiti", "THEFT") ~ "Theft",
INCIDENT == "Auto Theft" ~ "Auto Theft",
INCIDENT %in% c("Simple Asasult Dom.", "Robbery", "Agg. Assault", "Agg. Assault Dom.", "Rape", "Arson", "Simple Assault Dom.", "Simple Assault Dom", "Homicide", "Agg. Assault Dom") ~ "Violent",
TRUE ~ "random")) %>%
filter(OffenseCat != "random")
#total number of incidents
saintpaulcrime %>%
distinct(CASE_NUMBER) %>%
count()
read_csv("Data/Crime/Crime_Incident_Report_2023.csv") %>%
mutate(year = as.numeric(substr(DATE, 1, 4))) %>%
filter(year != 2014, year!=2023) %>%
mutate(OffenseCat = case_when(INCIDENT %in% c("Theft", "Burglary", "Vandalism", "Narcotics", "Criminal Damage", "Graffiti", "THEFT") ~ "Theft",
INCIDENT == "Auto Theft" ~ "Auto Theft",
INCIDENT %in% c("Simple Asasult Dom.", "Robbery", "Agg. Assault", "Agg. Assault Dom.", "Rape", "Arson", "Simple Assault Dom.", "Simple Assault Dom", "Homicide", "Agg. Assault Dom") ~ "Violent",
TRUE ~ "random")) %>%
filter(OffenseCat == "random") %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
count(INCIDENT)
saintpaulcrime %>%
filter(str_detect(BLOCK, " & ")| str_detect(BLOCK, " AND ")) %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
count()
saintpaulcrime %>%
filter(!str_detect(BLOCK, " & "),!str_detect(BLOCK, " AND ")) %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
count()
sp <- saintpaulcrime %>%
filter(!str_detect(BLOCK, " & "), !str_detect(BLOCK, " AND ")) %>%
mutate(street_address = word(BLOCK, 1),
street_address = str_replace(street_address, "X", "0"))
sp$BLOCK <- sapply(sapply(strsplit(sp$BLOCK, split = ' '), function(x) x[2:length(x)]), paste, collapse = ' ')
sp <- sp %>%
mutate(BLOCK = str_replace(BLOCK, "OLDHUDSON", "OLD HUDSON"),
BLOCK = str_replace(BLOCK, "ANNARBOR", "ANN ARBOR"),
BLOCK = str_replace(BLOCK, "BARGECHANNEL", "BARGE CHANNEL"),
BLOCK = str_replace(BLOCK, "BATTLECREEK", "BATTLE CREEK"),
BLOCK = str_replace(BLOCK, "CESARCHAVEZ", "CESAR CHAVEZ"),
BLOCK = str_replace(BLOCK, "CHEROKEEHTS", "CHEROKEE HTS"),
BLOCK = str_replace(BLOCK, "CROCUSHILL", "CROCUS HILL"),
BLOCK = str_replace(BLOCK, "CROSBYFARM", "CROSBY FARM"),
BLOCK = str_replace(BLOCK, "CROSBYLAKE", "CROSBY LAKE"),
BLOCK = str_replace(BLOCK, "DANPATCH", "DAN PATCH"),
BLOCK = str_replace(BLOCK, "DOROTHYDAY", "DOROTHY DAY"),
BLOCK = str_replace(BLOCK, "DRJUSTUSOHAGE", "DR JUSTUS OHAGE"),
BLOCK = str_replace(BLOCK, "EDGCUMBE", "EDGECUMBE"),
BLOCK = str_replace(BLOCK, "ENERGYPARK", "ENERGY PARK"),
BLOCK = str_replace(BLOCK, "GRANDHILL", "GRAND HILL"),
BLOCK = str_replace(BLOCK, "HARDENBERGH", "HARDEN BERGH"),
BLOCK = str_replace(BLOCK, "HARRIETISLAND", "HARRIET ISLAND"),
BLOCK = str_replace(BLOCK, "HIDDENFALLS", "HIDDEN FALLS"),
BLOCK = str_replace(BLOCK, "HUNTINGVALLEY", "HUNTING VALLEY"),
BLOCK = str_replace(BLOCK, "IVANWAY", "IVAN WAY"),
BLOCK = str_replace(BLOCK, "JEFFERSONCOMMONS", "JEFFERSON COMMONS"),
BLOCK = str_replace(BLOCK, "JOHNIRELAND", "JOHN IRELAND"),
BLOCK = str_replace(BLOCK, "LAFAYETTEFRONTAGE", "LAFAYETTE FRONTAGE"),
BLOCK = str_replace(BLOCK, "LARRYHO", "LARRY HO"),
BLOCK = str_replace(BLOCK, "LOWERAFTON", "LOWER AFTON"),
BLOCK = str_replace(BLOCK, "LOWERSTDENNIS", "LOWER ST DENNIS"),
BLOCK = str_replace(BLOCK, "LYNNHURST", "LYNN HURST"),
BLOCK = str_replace(BLOCK, "MARTINLUTHERKING", "MARTIN LUTHER KING"),
BLOCK = str_replace(BLOCK, "MISSISSIPPIRIVER", "MISSISSIPPI RIVER"),
BLOCK = str_replace(BLOCK, "MORNINGSIDE", "MORNING SIDE"),
BLOCK = str_replace(BLOCK, "MTAIRY", "MT AIRY"),
BLOCK = str_replace(BLOCK, "MTCURVE", "MT CURVE"),
BLOCK = str_replace(BLOCK, "OLDSIXTH", "OLD SIXTH"),
BLOCK = str_replace(BLOCK, "OTTOHUMMER", "OTTO HUMMER"),
BLOCK = str_replace(BLOCK, "PIERCEBUTLER", "PIERCE BUTLER"),
BLOCK = str_replace(BLOCK, "PIGSEYELAKE", "PIGSEYE LAKE"),
BLOCK = str_replace(BLOCK, "PTDOUGLAS", "PT DOUGLAS"),
BLOCK = str_replace(BLOCK, "RIVERPARK", "RIVER PARK"),
BLOCK = str_replace(BLOCK, "SPRUCETREE", "SPRUCE TREE"),
BLOCK = str_replace(BLOCK, "STANTHONY", "ST ANTHONY"),
BLOCK = str_replace(BLOCK, "STALBANS", "ST ALBANS"),
BLOCK = str_replace(BLOCK, "STCLAIR", "ST CLAIR"),
BLOCK = str_replace(BLOCK, "STDENNIS", "ST DENNIS"),
BLOCK = str_replace(BLOCK, "STPAUL", "ST PAUL"),
BLOCK = str_replace(BLOCK, "STPETER", "ST PETER"),
BLOCK = str_replace(BLOCK, "TROUTBROOK", "TROUT BROOK"),
BLOCK = str_replace(BLOCK, "UPPERAFTON", "UPPER AFTON"),
BLOCK = str_replace(BLOCK, "UPPERSTDENNIS", "UPPER ST DENNIS"),
BLOCK = str_replace(BLOCK, "VANBUREN", "VAN BUREN"),
BLOCK = str_replace(BLOCK, "VANSLYKE", "VAN SLYKE"),
BLOCK = str_replace(BLOCK, "WHEELOCKRIDGE", "WHEELOCK RIDGE"),
BLOCK = str_replace(BLOCK, "WHITEBEAR", "WHITE BEAR"),
BLOCK = str_replace(BLOCK, "WILLIAMTELL", "WILLIAM TELL"),
BLOCK = str_replace(BLOCK, "YACHTCLUB", "YACHT CLUB"),
BLOCK = str_replace(BLOCK, " BD", " BLVD"),
BLOCK = str_replace(BLOCK, " PK", " PKWY")) %>%
mutate(address = paste(street_address, BLOCK))
load("Data/CrimeCleaned/blocksLatLng.RData")
missing <- blocksLatLng %>%
filter(is.na(latitude))
cleaned <- blocksLatLng %>%
filter(!is.na(latitude))
#number missing/recorded
cleaned %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
count()
missing %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
count()
load("Data/CrimeCleaned/blocksLatLngPA.RData")
cleanPA <- blocksLatLngPA %>%
filter(!is.na(latitude))
cleaned <- cleaned %>%
rbind(cleanPA)
missing <- missing %>%
filter(!(CASE_NUMBER %in% cleanPA$CASE_NUMBER))
#count distinct clean, missing
cleanPA %>%
distinct(CASE_NUMBER) %>%
count()
missing %>%
distinct(CASE_NUMBER) %>%
count()
load("Data/CrimeCleaned/rearrangedLatLngW.RData")
load("Data/CrimeCleaned/rearrangedLatLng.RData")
rearrangedLatLng <- rbind(rearrangedLatLng, rearrangedLatLngW) %>%
select(-address2, -number, -direction)
cleanRearranged <- rearrangedLatLng %>%
filter(!is.na(latitude))
cleaned <- cleaned %>%
rbind(cleanRearranged)
missing <- missing %>%
filter(!(CASE_NUMBER %in% cleanRearranged$CASE_NUMBER))
#count distinct clean, missing
cleanRearranged %>%
distinct(CASE_NUMBER) %>%
count()
missing %>%
distinct(CASE_NUMBER) %>%
count()
load("Data/CrimeCleaned/weirdLatLngAVE.RData")
weirdLatLngAVE <- weirdLatLngAVE %>%
select(-latitude...18, -longitude...19) %>%
rename("latitude" = "latitude...20",
"longitude" = "longitude...21")
cleanAVE <- weirdLatLngAVE %>%
filter(!is.na(latitude))
cleaned <- cleaned %>%
rbind(cleanAVE)
missing <- missing %>%
filter(!(CASE_NUMBER %in% cleanAVE$CASE_NUMBER)) %>%
mutate(address = str_replace(address, " PA,", " PKWY,")) #add in this
#count clean, missing
cleanAVE %>%
distinct(CASE_NUMBER) %>%
count()
missing %>%
distinct(CASE_NUMBER) %>%
count()
load("Data/CrimeCleaned/directionELL.RData")
directionELL <- directionELL %>%
select(-latitude...18, -longitude...19) %>%
rename("latitude" = "latitude...20",
"longitude" = "longitude...21")
cleanDirection <- directionELL %>%
filter(!is.na(latitude))
cleaned <- cleaned %>%
rbind(cleanDirection)
missing <- missing %>%
filter(!(CASE_NUMBER %in% cleanDirection$CASE_NUMBER))
load("Data/CrimeCleaned/directionWLL.RData")
directionWLL <- directionWLL %>%
select(-latitude...18, -longitude...19) %>%
rename("latitude" = "latitude...20",
"longitude" = "longitude...21")
cleanDirectionW <- directionWLL %>%
filter(!is.na(latitude))
cleaned <- cleaned %>%
rbind(cleanDirectionW)
missing <- missing %>%
filter(!(CASE_NUMBER %in% cleanDirectionW$CASE_NUMBER))
load("Data/CrimeCleaned/directionNLL.RData")
directionNLL <- directionNLL %>%
select(-latitude...18, -longitude...19) %>%
rename("latitude" = "latitude...20",
"longitude" = "longitude...21")
cleanDirectionN <- directionNLL %>%
filter(!is.na(latitude))
cleaned <- cleaned %>%
rbind(cleanDirectionN)
missing <- missing %>%
filter(!(CASE_NUMBER %in% cleanDirectionN$CASE_NUMBER))
load("Data/CrimeCleaned/directionSLL.RData")
directionSLL <- directionSLL %>%
select(-latitude...18, -longitude...19) %>%
rename("latitude" = "latitude...20",
"longitude" = "longitude...21")
cleanDirectionS <- directionSLL %>%
filter(!is.na(latitude))
cleaned <- cleaned %>%
rbind(cleanDirectionS)
missing <- missing %>%
filter(!(CASE_NUMBER %in% cleanDirectionS$CASE_NUMBER))
#count missing/clean
cleaned %>%
distinct(CASE_NUMBER) %>%
count()
missing %>%
distinct(CASE_NUMBER) %>%
count()
load("Data/CrimeCleaned/downtownLL.RData")
cleanDowntown <- downtownLL %>%
filter(!is.na(latitude)) %>%
select(-address2, -number, -direction, -street)
cleaned <- cleaned %>%
rbind(cleanDowntown)
missing <- missing %>%
filter(!(CASE_NUMBER %in% cleanDowntown$CASE_NUMBER))
cleaned %>%
distinct(CASE_NUMBER) %>%
count()
missing %>%
distinct(CASE_NUMBER) %>%
count()
intersections<- read_csv("Data/Crime/intersections_RamseyCo_geocoded2.csv") %>%
filter(Score > 0) %>%
select(USER_combined, X, Y)
intersections$USER_combined <- sapply(sapply(strsplit(intersections$USER_combined, split = ' '), function(x) x[1:length(x)-1]), paste, collapse = ' ')
intersectionsClean <- saintpaulcrime %>%
filter(str_detect(BLOCK, " AND ")|str_detect(BLOCK, " & ")) %>%
mutate(BLOCK = str_replace(BLOCK, " AND ", " & ")) %>%
left_join(intersections, by = c("BLOCK" = "USER_combined")) %>%
filter(!is.na(X)) %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
rename("latitude" = "Y",
"longitude" = "X") %>%
select(INCIDENT, BLOCK, year, OffenseCat, longitude, latitude)
cleanedFinal <- cleaned %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
select(-street_address, -BLOCK) %>%
rename("BLOCK" = "address") %>%
select(INCIDENT, BLOCK, year, OffenseCat, longitude, latitude)
totalSP <- rbind(cleanedFinal, intersectionsClean)
sp_sf <- totalSP %>%
st_as_sf(coords = c("longitude", "latitude"), crs = "NAD83")
tract_points_sp <- st_join(sp_sf, left = FALSE, gent_clean["tractmod"])
tract_points_sp %>%
mutate(OffenseCat = case_when(OffenseCat == "Auto Theft" ~ "Theft",
TRUE ~ OffenseCat)) %>%
st_drop_geometry() %>%
group_by(tractmod, year, OffenseCat, .drop=FALSE)
tract_points_sp %>%
mutate(OffenseCat = case_when(OffenseCat == "Auto Theft" ~ "Theft",
TRUE ~ OffenseCat)) %>%
st_drop_geometry() %>%
group_by(tractmod, year, OffenseCat, .drop=FALSE) %>%
count() %>%
pivot_wider(names_from = year, values_from = n)
crimes_per_tract_no_geo <- tract_points_sp %>%
mutate(OffenseCat = case_when(OffenseCat == "Auto Theft" ~ "Theft",
TRUE ~ OffenseCat)) %>%
st_drop_geometry() %>%
group_by(tractmod, year, OffenseCat, .drop=FALSE) %>%
count() %>%
pivot_wider(names_from = year, values_from = n) %>%
replace(is.na(.),0) %>%
pivot_longer(cols = c(`2015`:`2022`),names_to = "year", values_to = "n") %>%
pivot_wider(names_from = OffenseCat, values_from = n)
tract_aggregated_sp <- gent_clean %>%
right_join(crimes_per_tract_no_geo, by = "tractmod")
tract_aggregated_sp %>%
filter(year %in% c(2020)) %>%
mutate(theftD= case_when(Theft <=90 ~ "38-90",
Theft >90 & Theft  <=130 ~ "91-130",
Theft >130 & Theft <= 200 ~ "131-200",
TRUE ~ "201+")) %>%
mutate(theftD= fct_relevel(theftD, levels = c("38-90", "91-130", "131-200", "201+"))) %>%
ggplot()+
geom_sf(aes(fill = theftD))+
scale_fill_brewer(palette = "Blues")+
theme_classic()+
#annotate("point", x = -93.2277, y = 44.974, colour = "white", size = 1) +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5, family = "mono"),
strip.background = element_blank(),
legend.title = element_text(family = "mono"),
legend.text = element_text(family = "mono"),
strip.text = element_text(family = "mono"))+
labs(title = "Recorded theft counts by census tract in 2020", fill = "Count", x = "", y="")
tract_aggregated_sp %>%
filter(year %in% c(2020)) %>%
mutate(violentD= case_when(Violent <=10 ~ "0-10",
Violent >10 & Violent  <=25 ~ "11-25",
Violent >25 & Violent <= 50 ~ "26-50",
Violent >50 & Violent <= 100 ~ "51-100",
TRUE ~ "101+")) %>%
mutate(violentD= fct_relevel(violentD, levels = c("0-10", "11-25", "26-50", "51-100", "101+"))) %>%
ggplot()+
geom_sf(aes(fill = violentD))+
scale_fill_brewer(palette = "Blues")+
theme_classic()+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5, family = "mono"),
strip.background = element_blank(),
legend.title = element_text(family = "mono"),
legend.text = element_text(family = "mono"),
strip.text = element_text(family = "mono"))+
labs(title = "Recorded violent crime counts by census tract in 2020", fill = "Count")
tract_aggregated_sp
656/8
tract_aggregated_sp %>%
st_drop_geometry() %>%
filter(year %in% c(2015, 2020)) %>%
dplyr::select(population_2020, population_2010, bachelors_2010, bachelors_2020, medianIncome_2010, medianIncome_2020, medianHomeValue_2020, medianHomeValue_2010, medContractRent_2010, medContractRent_2020, canGent2010, gentrified, Violent, Theft, year) %>%
mutate(Gentrification_status = case_when(canGent2010 == "No" ~ "Cannot Gentrify",
canGent2010 == "Yes" & gentrified == "0" ~ "Could, but didn't gentrify",
TRUE ~ "Gentrified")) %>%
group_by(Gentrification_status, year) %>%
summarize(`2010 Population` = mean(population_2010),
`2020 Population` = mean(population_2020),
`2010 Bachelors %` = weighted.mean(bachelors_2010/population_2010, population_2010),
`2020 Bachelors %` = weighted.mean(bachelors_2020/population_2020, population_2020),
`2010 Median Income` = weighted.mean(medianIncome_2010, population_2010),
`2020 Median Income` = weighted.mean(medianIncome_2020, population_2020, na.rm=TRUE),
`2010 Median Home Value` = weighted.mean(medianHomeValue_2010, population_2010),
`2020 Median Home Value` = weighted.mean(medianHomeValue_2020, population_2020, na.rm=TRUE),
`2010 Median Contract Rent` = weighted.mean(medContractRent_2010, population_2010),
`2020 Median Contract Rent` = weighted.mean(medContractRent_2020, population_2020),
`2010 Violent` = weighted.mean(Violent, population_2010),
`2020 Theft` = weighted.mean(Theft, population_2020))
View(missing)
missing %>%
count(year)
tract_aggregated_sp %>%
st_drop_geometry() %>%
filter(year %in% c(2015, 2020)) %>%
dplyr::select(population_2020, population_2010, bachelors_2010, bachelors_2020, medianIncome_2010, medianIncome_2020, medianHomeValue_2020, medianHomeValue_2010, medContractRent_2010, medContractRent_2020, canGent2010, gentrified, Violent, Theft, year) %>%
mutate(Gentrification_status = case_when(canGent2010 == "No" ~ "Cannot Gentrify",
canGent2010 == "Yes" & gentrified == "0" ~ "Could, but didn't gentrify",
TRUE ~ "Gentrified")) %>%
group_by(Gentrification_status, year) %>%
summarize(`2010 Population` = mean(population_2010),
`2020 Population` = mean(population_2020),
`2010 Bachelors %` = weighted.mean(bachelors_2010/population_2010, population_2010),
`2020 Bachelors %` = weighted.mean(bachelors_2020/population_2020, population_2020),
`2010 Median Income` = weighted.mean(medianIncome_2010, population_2010),
`2020 Median Income` = weighted.mean(medianIncome_2020, population_2020, na.rm=TRUE),
`2010 Median Home Value` = weighted.mean(medianHomeValue_2010, population_2010),
`2020 Median Home Value` = weighted.mean(medianHomeValue_2020, population_2020, na.rm=TRUE),
`2010 Median Contract Rent` = weighted.mean(medContractRent_2010, population_2010),
`2020 Median Contract Rent` = weighted.mean(medContractRent_2020, population_2020),
`2010 Violent` = weighted.mean(Violent, population_2010),
`2020 Theft` = weighted.mean(Theft, population_2020))
3678+3883
7561/2
3512+3981
7493/2
2657+2801
5458/2
(19.5/3780)*1000
(23/3883)*1000
(158.5/3780)*1000
(198.7/3883)*1000
(47.3/3746)*1000
(56.1/3981)*1000
(260/3746)*1000
(285/3981)*1000
(40.7/2729)*1000
(43.2/2802)*1000
(352.7/2729)*1000
(319/2802)*1000
tract_aggregated_sp %>%
st_drop_geometry() %>%
filter(year %in% c(2015, 2020)) %>%
dplyr::select(population_2020, population_2010, bachelors_2010, bachelors_2020, medianIncome_2010, medianIncome_2020, medianHomeValue_2020, medianHomeValue_2010, medContractRent_2010, medContractRent_2020, canGent2010, gentrified, Violent, Theft, year) %>%
mutate(Gentrification_status = case_when(canGent2010 == "No" ~ "Cannot Gentrify",
canGent2010 == "Yes" & gentrified == "0" ~ "Could, but didn't gentrify",
TRUE ~ "Gentrified")) %>%
group_by(Gentrification_status, year) %>%
summarize(`2010 Population` = mean(population_2010),
`2020 Population` = mean(population_2020),
`2010 Bachelors %` = weighted.mean(bachelors_2010/population_2010, population_2010),
`2020 Bachelors %` = weighted.mean(bachelors_2020/population_2020, population_2020),
`2010 Median Income` = weighted.mean(medianIncome_2010, population_2010),
`2020 Median Income` = weighted.mean(medianIncome_2020, population_2020, na.rm=TRUE),
`2010 Median Home Value` = weighted.mean(medianHomeValue_2010, population_2010),
`2020 Median Home Value` = weighted.mean(medianHomeValue_2020, population_2020, na.rm=TRUE),
`2010 Median Contract Rent` = weighted.mean(medContractRent_2010, population_2010),
`2020 Median Contract Rent` = weighted.mean(medContractRent_2020, population_2020),
`2010 Violent` = weighted.mean(Violent, population_2010),
`2020 Theft` = weighted.mean(Theft, population_2020))
summary = data.frame(`Variable` = c("Violent Crimes/1000 residents", "", "Thefts/1000 residents", "", "Population", "", "Bachelor's %", "", "Median Income", "", "Median Home Value", "", "Median Contract Rent", ""), `Cannot gentrify` = c("5.2", "5.9","41.9", "51.2", "3,780", "3,883", "29", "31", "61,379", "77,289", "256,405", "284,649", "748", "1,027"), `Could, but didn't gentrify`= c("12.6", "14.1", "69.4", "71.6", "3,746", "3,981", "11", "13", "34,359", "47,305", "175,305", "172,867", "648", "859"), Gentrified= c("14.9", "15.4", "129.2", "113.8", "2,729", "2,802", "19", "25", "36,934", "55,062", "200,930", "228,746", "635", "905"), check.names = FALSE)
xtable(summary)
library(xtable)
xtable(summary)
sp_violent20 <- glm(Violent_2020 ~ canGent_gentrified + Violent_2015 + offset(log(population_2020)),
data = crimes_wide_sp, family = poisson(link=log))
crimes_wide_sp <- tract_aggregated_sp %>%
st_drop_geometry() %>%
pivot_wider(id_cols = c(tractmod:canGent_gentrified),names_from = year, values_from = c(Theft, Violent))
crimes_wide_sp$canGent_gentrified <- relevel(crimes_wide_sp$canGent_gentrified, ref = "Could, but didn't gentrify")
sp_violent20 <- glm(Violent_2020 ~ canGent_gentrified + Violent_2015 + offset(log(population_2020)),
data = crimes_wide_sp, family = poisson(link=log))
summary(sp_violent20)
sp_violent20_quasi <- glm(Violent_2020 ~ canGent_gentrified + Violent_2015 + offset(log(population_2020)),
data = crimes_wide_sp, family = quasipoisson(link=log))
summary(sp_violent20_quasi)
violent2020 <- tract_aggregated_sp %>%
st_drop_geometry() %>%
filter(year == 2020) %>%
rename("Violent_2020" = "Violent") %>%
dplyr::select(Violent_2020)
theft2020 <- tract_aggregated_sp %>%
st_drop_geometry() %>%
filter(year == 2020) %>%
rename("Theft_2020" = "Theft") %>%
dplyr::select(Theft_2020)
min <- tract_aggregated_sp %>%
filter(year == 2015) %>%
rename("Violent_2015" = "Violent",
"Theft_2015" = "Theft") %>%
cbind(violent2020, theft2020)
min$canGent_gentrified <- relevel(min$canGent_gentrified, ref = "Could, but didn't gentrify")
sp_violent_spatial <- S.CARdissimilarity(formula = Theft_2020 ~ canGent_gentrified + Theft_2015 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
library(spdep)
Queen <- poly2nb(min, queen=TRUE)
sp_violent_spatial <- S.CARdissimilarity(formula = Theft_2020 ~ canGent_gentrified + Theft_2015 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
library(CARBayes)
sp_violent_spatial <- S.CARdissimilarity(formula = Theft_2020 ~ canGent_gentrified + Theft_2015 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
W <- nb2mat(Queen, style = "B", zero.policy = TRUE)
sp_violent_spatial <- S.CARdissimilarity(formula = Theft_2020 ~ canGent_gentrified + Theft_2015 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
Z <- matrix(0.01, ncol = 82, nrow = 82) - diag(.01, ncol = 82, nrow = 82)
sp_violent_spatial <- S.CARdissimilarity(formula = Theft_2020 ~ canGent_gentrified + Theft_2015 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
sp_violent_spatial <- S.CARdissimilarity(formula = Violent_2020 ~ canGent_gentrified + Violent_2015 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
sp_violent_spatial
sp_theft_spatial <- S.CARdissimilarity(formula = Theft_2020 ~ canGent_gentrified + Theft_2015 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
summary(sp_violent20)
confint(sp_violent20)
summary(sp_violent20_quasi)
summary(sp_violent20)
confint(sp_violent20)
confint(sp_violent20_quasi)
summary(sp_violent20_quasi)
confint(sp_violent20_quasi)
summary(sp_theft20)
sp_theft20 <- glm(Theft_2020 ~ canGent_gentrified + Theft_2015 + offset(log(population_2020)),
data = crimes_wide_sp, family = poisson(link=log))
summary(sp_theft20)
confint(sp_theft20)
summary(sp_theft20_quasi)
sp_theft20_quasi <- glm(Theft_2020 ~ canGent_gentrified + Theft_2015 + offset(log(population_2020)),
data = crimes_wide_sp, family = quasipoisson(link=log))
summary(sp_theft20_quasi)
confint(sp_theft20_quasi)
sp_theft_spatial
confint(sp_theft20_quasi)
summary(sp_theft20_quasi)
summary(sp_theft20)
sp_theft_spatial
