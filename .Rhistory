"built1940to1949" = "B25034_009E",
"builtPre1940" = "B25034_010E",
"medContractRent" = "B25058_001E",
"medGrossRent" = "B25064_001E",
"medIncMoe" = "B06011_001M",
"aggIncMoe" = "B19313_001M",
"bachelors25to64Moe" = "B23006_023M",
"total25to64Moe" = "B23006_001M",
"medYrStructureBuiltMoe" = "B25035_001M",
"totalStructureMoe" = "B25034_001M",
"builtSince2005Moe" = "B25034_002M",
"built2000to2004Moe" = "B25034_003M",
"built1990to1999Moe" = "B25034_004M",
"built1980to1989Moe" = "B25034_005M",
"built1970to1979Moe" = "B25034_006M",
"built1960to1969Moe" = "B25034_007M",
"built1950to1959Moe" = "B25034_008M",
"built1940to1949Moe" = "B25034_009M",
"builtPre1940Moe" = "B25034_010M",
"medContractRentMoe" = "B25058_001M",
"medGrossRentMoe" = "B25064_001M")
acs2010
dicennial2010 <- get_decennial(year = 2010, state = "MN", geography = "tract", variables = c("H012001", "P008001", "P008002", "P008003", "P008004", "P016001", "P016002", "P016003", "H003001", "H003002", "H003003", "H004001", "H004002", "H004003", "H004004", "P012002", "P012010", "P012011", "P012012", "P012026", "P012034", "P012035", "P012036"), geometry = TRUE, output='wide') %>%
filter(word(NAME, 4) %in% c("Hennepin", "Ramsey", "Anoka", "Carver", "Dakota", "Scott", "Washington")) %>%
mutate(tract = word(NAME, 3),
tract = str_remove(tract, ","),
county = word(NAME, 4)) %>%
select(-NAME) %>%
rename("AvgHouseholdSize" = "H012001",
"TotalPopRace" = "P008001",
"PopOneRace" = "P008002",
"PopWhiteAlone" = "P008003",
"PopBlackAlone"= "P008004",
"PopAge" = "P016001",
"PopUnder18" = "P016002",
"PopOver18" = "P016003",
"TotalHousingUnits" = "H003001",
"OccupiedHousingUnits" = "H003002",
"VacantHousingUnits" = "H003003",
"OwnershipTotal" = "H004001",
"OwnedWithMortgage" = "H004002",
"OwnedFreeClear" = "H004003",
"RentOccupied" = "H004004",
"MalePop" = "P012002",
"Male22to24" = "P012010",
"Male25to29" = "P012011",
"Male30to34" = "P012012",
"FemalePop" = "P012026",
"Female22to24" = "P012034",
"Female25to29" = "P012035",
"Female30to34" = "P012036")
dicennial2010
View(acs2010)
dicennial2010 %>%
left_join(acs2010, by = c("tract", "county", "GEOID"))
tract2010 <- dicennial2010 %>%
left_join(acs2010, by = c("tract", "county", "GEOID"))
gentDing <- tract2010 %>%
filter(county %in% c("Hennepin", "Ramsey")) %>%
group_by(county) %>%
mutate(countyAvgInc = weighted.mean(medianIncome, TotalPopRace),
Ding = case_when(medianIncome > countyAvgInc ~ 0,
TRUE ~ 1)) %>%
select(-countyAvgInc)
View(gentDing)
# find metro area mean income
tract2010 %>%
summarize(meanMetroInc = weighted.mean(medianIncome, TotalPopRace, na.rm = TRUE))
# find average amount of housing built in the last twenty years and identify gentrifiable tracts accordingly
gentFreeman <- tract2010 %>%
filter(county %in% c("Hennepin", "Ramsey")) %>%
mutate(built1980to2004 = (built2000to2004 + built1990to1999 + built1980to1989)  / totalStructure,
medianRecHome = weighted.mean(built1980to2004, totalStructure, na.rm = TRUE),
freeman = case_when(medianIncome <= 33140.75 & built1980to2004 <= medianRecHome ~ 1,
TRUE ~ 0)) %>%
select(freeman)
gentBates <- tract2010 %>%
filter(county %in% c("Hennepin", "Ramsey")) %>%
group_by(county) %>%
mutate(CityAvgRent = weighted.mean(RentOccupied/OwnershipTotal, OwnershipTotal),
CityPoc = weighted.mean((TotalPopRace - PopWhiteAlone)/TotalPopRace, TotalPopRace),
CityAvgInc = weighted.mean(medianIncome, TotalPopRace),
CityBachelors = weighted.mean(bachelors25to64/total25to64, total25to64)) %>%
ungroup() %>%
mutate(AvgRent = RentOccupied/OwnershipTotal,
Poc = (TotalPopRace - PopWhiteAlone)/TotalPopRace,
Bachelors = bachelors25to64/total25to64,
highRent = case_when(AvgRent >= CityAvgRent ~ 1,
TRUE ~ 0),
highPoc = case_when(Poc >= CityPoc ~ 1,
TRUE ~ 0),
lowInc = case_when(medianIncome <= CityAvgInc ~ 1,
TRUE ~ 0),
lowBachelors = case_when(Bachelors <= CityBachelors ~ 1,
TRUE ~ 0),
totGent = highRent + highPoc + lowInc + lowBachelors,
bates = case_when(totGent >= 3 ~ 1,
TRUE ~0)) %>%
select(bates)
gentrifiable <- gentDing %>%
st_join(gentFreeman) %>%
st_join(gentBates) %>%
mutate(canGent = as.factor(case_when(Ding+freeman + bates >=2 ~ 1,
TRUE ~ 0)))
View(gentFreeman)
gentBates <- tract2010 %>%
filter(county %in% c("Hennepin", "Ramsey")) %>%
group_by(county) %>%
mutate(CityAvgRent = weighted.mean(RentOccupied/OwnershipTotal, OwnershipTotal),
CityPoc = weighted.mean((TotalPopRace - PopWhiteAlone)/TotalPopRace, TotalPopRace),
CityAvgInc = weighted.mean(medianIncome, TotalPopRace),
CityBachelors = weighted.mean(bachelors25to64/total25to64, total25to64)) %>%
ungroup() %>%
mutate(AvgRent = RentOccupied/OwnershipTotal,
Poc = (TotalPopRace - PopWhiteAlone)/TotalPopRace,
Bachelors = bachelors25to64/total25to64,
highRent = case_when(AvgRent >= CityAvgRent ~ 1,
TRUE ~ 0),
highPoc = case_when(Poc >= CityPoc ~ 1,
TRUE ~ 0),
lowInc = case_when(medianIncome <= CityAvgInc ~ 1,
TRUE ~ 0),
lowBachelors = case_when(Bachelors <= CityBachelors ~ 1,
TRUE ~ 0),
totGent = highRent + highPoc + lowInc + lowBachelors,
bates = case_when(totGent >= 3 ~ 1,
TRUE ~0)) %>%
select(bates) %>%
st_drop()
gentBates <- tract2010 %>%
filter(county %in% c("Hennepin", "Ramsey")) %>%
group_by(county) %>%
mutate(CityAvgRent = weighted.mean(RentOccupied/OwnershipTotal, OwnershipTotal),
CityPoc = weighted.mean((TotalPopRace - PopWhiteAlone)/TotalPopRace, TotalPopRace),
CityAvgInc = weighted.mean(medianIncome, TotalPopRace),
CityBachelors = weighted.mean(bachelors25to64/total25to64, total25to64)) %>%
ungroup() %>%
mutate(AvgRent = RentOccupied/OwnershipTotal,
Poc = (TotalPopRace - PopWhiteAlone)/TotalPopRace,
Bachelors = bachelors25to64/total25to64,
highRent = case_when(AvgRent >= CityAvgRent ~ 1,
TRUE ~ 0),
highPoc = case_when(Poc >= CityPoc ~ 1,
TRUE ~ 0),
lowInc = case_when(medianIncome <= CityAvgInc ~ 1,
TRUE ~ 0),
lowBachelors = case_when(Bachelors <= CityBachelors ~ 1,
TRUE ~ 0),
totGent = highRent + highPoc + lowInc + lowBachelors,
bates = case_when(totGent >= 3 ~ 1,
TRUE ~0)) %>%
select(bates) %>%
st_drop_geometry()
# find metro area mean income
tract2010 %>%
summarize(meanMetroInc = weighted.mean(medianIncome, TotalPopRace, na.rm = TRUE))
# find average amount of housing built in the last twenty years and identify gentrifiable tracts accordingly
gentFreeman <- tract2010 %>%
filter(county %in% c("Hennepin", "Ramsey")) %>%
mutate(built1980to2004 = (built2000to2004 + built1990to1999 + built1980to1989)  / totalStructure,
medianRecHome = weighted.mean(built1980to2004, totalStructure, na.rm = TRUE),
freeman = case_when(medianIncome <= 33140.75 & built1980to2004 <= medianRecHome ~ 1,
TRUE ~ 0)) %>%
select(freeman, tract) %>%
st_drop_geometry()
tract2010 %>%
st_drop_geometry() %>%
summarize(meanMetroInc = weighted.mean(medianIncome, TotalPopRace, na.rm = TRUE))
# find metro area mean income
tract2010 %>%
st_drop_geometry() %>%
summarize(meanMetroInc = weighted.mean(medianIncome, TotalPopRace, na.rm = TRUE))
# find average amount of housing built in the last twenty years and identify gentrifiable tracts accordingly
gentFreeman <- tract2010 %>%
filter(county %in% c("Hennepin", "Ramsey")) %>%
mutate(built1980to2004 = (built2000to2004 + built1990to1999 + built1980to1989)  / totalStructure,
medianRecHome = weighted.mean(built1980to2004, totalStructure, na.rm = TRUE),
freeman = case_when(medianIncome <= 35167.87 & built1980to2004 <= medianRecHome ~ 1,
TRUE ~ 0)) %>%
select(freeman, tract) %>%
st_drop_geometry()
gentDing %>%
left_join(gentFreeman) %>%
left_join(gentBates)
gentDing
gentDing %>%
left_join(gentFreeman, by = "tract") %>%
left_join(gentBates, by = "tract")
gentBates <- tract2010 %>%
filter(county %in% c("Hennepin", "Ramsey")) %>%
group_by(county) %>%
mutate(CityAvgRent = weighted.mean(RentOccupied/OwnershipTotal, OwnershipTotal),
CityPoc = weighted.mean((TotalPopRace - PopWhiteAlone)/TotalPopRace, TotalPopRace),
CityAvgInc = weighted.mean(medianIncome, TotalPopRace),
CityBachelors = weighted.mean(bachelors25to64/total25to64, total25to64)) %>%
ungroup() %>%
mutate(AvgRent = RentOccupied/OwnershipTotal,
Poc = (TotalPopRace - PopWhiteAlone)/TotalPopRace,
Bachelors = bachelors25to64/total25to64,
highRent = case_when(AvgRent >= CityAvgRent ~ 1,
TRUE ~ 0),
highPoc = case_when(Poc >= CityPoc ~ 1,
TRUE ~ 0),
lowInc = case_when(medianIncome <= CityAvgInc ~ 1,
TRUE ~ 0),
lowBachelors = case_when(Bachelors <= CityBachelors ~ 1,
TRUE ~ 0),
totGent = highRent + highPoc + lowInc + lowBachelors,
bates = case_when(totGent >= 3 ~ 1,
TRUE ~0)) %>%
select(bates, tract) %>%
st_drop_geometry()
gentDing %>%
left_join(gentFreeman, by = "tract") %>%
left_join(gentBates, by = "tract")
gentrifiable <- gentDing %>%
left_join(gentFreeman, by = "tract") %>%
left_join(gentBates, by = "tract") %>%
mutate(canGent = as.factor(case_when(Ding+freeman + bates >=2 ~ 1,
TRUE ~ 0)))
gentrifiable %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
#geom_sf(data = roads_metro, fill = "green",color = "green", lwd= 0.3)+
geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()
river_lakes_big <- river_lakes %>%
filter(AREA_ACRES >= 500)
gentrifiable %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
#geom_sf(data = roads_metro, fill = "green",color = "green", lwd= 0.3)+
geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()
roads_sub <- st_crop(roads,st_bbox(gentrifiable))
gentrifiable %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "green",color = "green", lwd= 0.3)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()
gentrifiable
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
plot.title.position = "plot",
plot.title = element_markdown(family = "mono"),
plot.subtitle = element_markdown(family = "mono", size = 8))+
scale_fill_manual(values = c("navy", "red"))
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_manual(values = c("navy", "red"))
river_lakes_big <- river_lakes %>%
filter(AREA_ACRES >= 300)
roads_sub <- st_crop(roads,st_bbox(gentrifiable))
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_manual(values = c("navy", "red"))
river_lakes_big <- st_crop(river_lakes %>%
filter(AREA_ACRES >= 300), st_bbox(gentrifiable))
river_lakes %>%
filter(AREA_ACRES >= 300)
st_crop(rivers_lakes_big, st_bbox(gentrifiable))
river_lakes_big <- river_lakes %>%
filter(AREA_ACRES >= 300)
st_crop(rivers_lakes_big, st_bbox(gentrifiable))
st_crop(river_lakes_big, st_bbox(gentrifiable))
View(roads_sub)
View(river_lakes_big)
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_manual(values = c("navy", "red"))
st_crs(gentrifiable)
st_crs(river_lakes_big)
st_crs(roads_sub)
st_crs(gentrifiable)
st_as_sf(river_lakes_big, crs = NAD83)
river_lakes_big <- st_as_sf(river_lakes_big, crs = NAD83)
st_crop(river_lakes_big, st_bbox(gentrifiable))
st_crs(river_lakes_big)
river_lakes_big <- st_as_sf(river_lakes_big, crs = NAD83)
st_crs(river_lakes_big)
st_transform(river_lakes_big, crs = NAD83)
st_transform(river_lakes_big, crs = 4617)
st_crs(river_lakes_big)
st_transform(river_lakes_big, crs = "OGC:CRS84")
river_lakes_big <- st_transform(river_lakes_big, crs = "OGC:CRS84")
st_crs(river_lakes_big)
gentrifiable2 <- st_transform(gentrifiable, crs = "OGC:CRS84")
st_crs(gentrifiable2)
st_crop(river_lakes_big, st_bbox(gentrifiable2))
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
#geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_manual(values = c("navy", "red"))
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_manual(values = c("navy", "red"))
install.packages("PrettyCols")
library(PrettyCols)
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_pretty_d()
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_pretty_d(name = "TangerineBlues")
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_pretty_d(name = "Autumn")
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_pretty_d(name = "Dark")
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_pretty_d(name = "Autumn", direction = -1)
gentrifiable %>%
mutate(canGent = case_when(canGent == "1" ~ "Yes",
TRUE ~ "No")) %>%
ggplot()+
geom_sf(aes(fill=canGent), lwd = 0.2, color = "white")+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
#geom_sf(data = river_lakes_big, fill = "lightblue",color = "lightblue")+
theme_classic()+
labs(title = "Gentrifiable census tracts in Minneapolis-Saint Paul in 2010", fill = "Gentrifiable")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 10))+
scale_fill_pretty_d(name = "Autumn", direction = -1)
acs2020 <- get_acs(year = 2020, state = "MN", geography = "tract", variables = c("B06011_001", "B19313_001", "B23006_023", "B25035_001", "B25034_001", "B25034_002", "B25034_003", "B25034_004", "B25034_005", "B25034_006", "B25034_007", "B25034_008", "B25034_009", "B25034_010", "B25058_001", "B25064_001"), output = "wide") %>%
filter(word(NAME, 4) %in% c("Hennepin", "Ramsey", "Anoka", "Carver", "Dakota", "Scott", "Washington"))%>%
mutate(tract = word(NAME, 3),
tract = str_remove(tract, ","),
county = word(NAME, 4)) %>%
select(-NAME) %>%
rename("medianIncome" = "B06011_001E",
"aggregateIncome" = "B19313_001E",
"bachelors25to64" = "B23006_023E",
"total25to64" = "B23006_001E",
"medYrStructureBuilt" = "B25035_001E",
"totalStructure" = "B25034_001E",
"builtSince2005" = "B25034_002E",
"built2000to2004" = "B25034_003E",
"built1990to1999" = "B25034_004E",
"built1980to1989" = "B25034_005E",
"built1970to1979" = "B25034_006E",
"built1960to1969" = "B25034_007E",
"built1950to1959" = "B25034_008E",
"built1940to1949" = "B25034_009E",
"builtPre1940" = "B25034_010E",
"medContractRent" = "B25058_001E",
"medGrossRent" = "B25064_001E",
"medIncMoe" = "B06011_001M",
"aggIncMoe" = "B19313_001M",
"bachelors25to64Moe" = "B23006_023M",
"total25to64Moe" = "B23006_001M",
"medYrStructureBuiltMoe" = "B25035_001M",
"totalStructureMoe" = "B25034_001M",
"builtSince2005Moe" = "B25034_002M",
"built2000to2004Moe" = "B25034_003M",
"built1990to1999Moe" = "B25034_004M",
"built1980to1989Moe" = "B25034_005M",
"built1970to1979Moe" = "B25034_006M",
"built1960to1969Moe" = "B25034_007M",
"built1950to1959Moe" = "B25034_008M",
"built1940to1949Moe" = "B25034_009M",
"builtPre1940Moe" = "B25034_010M",
"medContractRentMoe" = "B25058_001M",
"medGrossRentMoe" = "B25064_001M")
acsvariables2020 <- load_variables(year = 2020, dataset = "acs5")
View(acsvariables2020)
